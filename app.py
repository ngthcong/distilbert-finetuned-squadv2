import streamlit as st
from transformers import pipeline
import logging
from src import config

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class Model:
    def __init__(self):
        logger.info("ƒêang t·∫£i m√¥ h√¨nh ...")
        try:
            self.qa_pipeline = pipeline(config.PIPELINE_NAME, model=config.MODEL_NAME)
            logger.info("‚úÖ M√¥ h√¨nh ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")
        except Exception as e:
            logger.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh: {e}")
            raise e

    def query(self, context, question):
        logger.info(f"X·ª≠ l√Ω c√¢u h·ªèi: {question}")
        try:
            result = self.qa_pipeline(question=question, context=context)
            logger.info(f"K·∫øt qu·∫£ truy v·∫•n: {result['answer']}")
            return result["answer"]
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi truy v·∫•n: {e}")
            raise e

@st.cache_resource
def load_model():
    try:
        model = Model()
        st.session_state.model = model
        st.sidebar.success("‚úÖ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i!")
    except Exception as e:
        st.sidebar.error("‚ùå Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh. Xem log.")
        logger.exception("Kh√¥ng th·ªÉ kh·ªüi t·∫°o m√¥ h√¨nh.")


def process_query(model, context, query):
    try:
        result = model.query(context, query)
        return result
    except Exception as e:
        st.error("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω truy v·∫•n.")
        logger.exception("L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω truy v·∫•n.")
        return None


def render_sidebar():
    st.sidebar.title("ü§ñ AI Model Interface")
    st.sidebar.write("Model: **DistilBERT Finetuned**")

    if st.sidebar.button("Load Model"):
        load_model()


def render_main_app():
    st.title("üìù AI Contextual Query App")

    context = st.text_area("Context:", key="context")
    query_disabled = context.strip() == ""
    query = st.text_area("Query:", disabled=query_disabled, key="query")

    if st.button("X·ª≠ l√Ω"):
        if not context.strip():
            st.warning("Vui l√≤ng nh·∫≠p Context tr∆∞·ªõc khi x·ª≠ l√Ω.")
            logger.warning("Ng∆∞·ªùi d√πng nh·∫•n x·ª≠ l√Ω m√† ch∆∞a nh·∫≠p Context.")
        elif not query.strip():
            st.warning("Vui l√≤ng nh·∫≠p Query.")
            logger.warning("Ng∆∞·ªùi d√πng nh·∫•n x·ª≠ l√Ω m√† ch∆∞a nh·∫≠p Query.")
        elif "model" not in st.session_state or st.session_state.model is None:
            st.error("Model ch∆∞a ƒë∆∞·ª£c load. H√£y nh·∫•n 'Load Model' trong sidebar.")
            logger.warning("Model ch∆∞a ƒë∆∞·ª£c load.")
        else:
            logger.info("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω truy v·∫•n...")
            result = process_query(st.session_state.model, context, query)
            if result:
                st.success("üéØ K·∫øt qu·∫£:")
                st.write(result)


def main():
    if "model" not in st.session_state:
        st.session_state.model = None

    render_sidebar()
    render_main_app()


if __name__ == "__main__":
    main()